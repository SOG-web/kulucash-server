// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Department {
  TELEMARKETER
  CUSTOMERSERVICE
  COLLECTOR
  VERIFICATOR
  ACCOUNTANT
}

enum Role {
  ADMIN
  USER
  TEAMLEADER
  TEAMMEMBER
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  DISBURSED
  PARTIALLY_PAID
  PAID
}

enum TeleMarketerUserStatus {
  ACTIVE
  INACTIVE
  BACKSLIDDEN
}

enum CallStatus {
  NOTCALLED
  CALLED
  INPROGRESS
}

enum StaffStatus {
  ONLINE
  AWAY
  OFFLINE
}

enum LoanRepaymentType {
  FULL
  PARTIAL
}

enum OverDueCategory {
  D1
  D2
  D0
  S1
  S2
  M1
  M2
  M3
}

enum DisbursementStatus {
  PAID
  FAILED
  PENDING
  NOTDISBURSED
}

model Admin {
  id           String   @id @unique @default(nanoid(5))
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  phone_number String   @unique
  email        String   @unique
  password     String
  first_name   String
  last_name    String
  role         Role
}

model Staff {
  id            String          @id @unique @default(nanoid(5))
  created_at    DateTime        @default(now())
  updated_at    DateTime        @updatedAt
  phone_number  String          @unique
  email         String          @unique
  password      String
  first_name    String
  last_name     String
  status        StaffStatus     @default(OFFLINE)
  lock          Boolean         @default(false)
  department    Department
  role          Role
  Comment       Comment[]
  ChatList      ChatList[]
  ResolvedIssue ResolvedIssue[]
}

model User {
  id                       String              @id @unique @default(nanoid(5))
  created_at               DateTime            @default(now())
  updated_at               DateTime            @updatedAt
  first_name               String
  middle_name              String?
  last_name                String
  dob                      String
  gender                   String
  nationality              String
  bvn                      String              @unique
  education                String
  marital_status           String
  number_of_children       String
  current_address          String
  email                    String              @unique
  phone_number             String              @unique
  lga_of_origin            String
  state_of_origin          String
  city                     String
  state_of_residence       String
  password                 String
  level                    Int
  loan_name                String?
  max_amount               Int
  min_amount               Int
  cycle                    Int                 @default(0)
  days_tenure              Int                 @default(0)
  eligible_to_collect_loan Boolean             @default(false)
  image                    String?
  salary_range             String?
  id_card                  String?             @default("")
  bvn_data                 BvnData?
  BankDetail               BankDetail[]
  EmergencyContact         EmergencyContact[]
  ColleagueContact         ColleagueContact[]
  EmploymentDetails        EmploymentDetails[]
  CardDetail               CardDetail[]
  role                     Role
  UserProperties           UserProperties?
  Comment                  Comment[]
}

model UserProperties {
  id                       String                 @id @unique @default(uuid())
  created_at               DateTime               @default(now())
  updated_at               DateTime               @updatedAt
  user                     User                   @relation(fields: [userId], references: [id])
  userId                   String                 @unique
  telemarketer_call_status CallStatus             @default(NOTCALLED)
  telemarketer_handler_id  String?
  telemarketer_call_count  Int?
  telemarketer_call_time   String?
  telemarketer_status      TeleMarketerUserStatus @default(ACTIVE)
  telemarketer_due_date    String?                @default("0")

  verificator_call_status CallStatus
  verificator_call_count  Int?
  verificator_handler_id  String?
  verificator_call_time   String?    @default("0")
  verificator_due_date    String?    @default("0")

  collector_call_status CallStatus
  collector_call_count  Int?
  collector_handler_id  String?
  collector_call_time   String?    @default("0")
  collector_due_date    String?    @default("0")

  customer_service_call_count  Int?
  customer_service_call_status CallStatus
  customer_service_handler_id  String?
  customer_service_call_time   String?    @default("0")
  customer_service_due_date    String?    @default("0")

  Loans         Loans[]
  Comment       Comment[]
  ChatList      ChatList[]
  ResolvedIssue ResolvedIssue[]
  Disbursement  Disbursement[]
}

model Comment {
  id               String          @id @unique @default(uuid())
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  comment          String
  user             User            @relation(fields: [userId], references: [id])
  userId           String
  department       Department
  staff            Staff           @relation(fields: [staffId], references: [id])
  staffId          String
  UserProperties   UserProperties? @relation(fields: [userPropertiesId], references: [id])
  userPropertiesId String?
}

model BvnData {
  id                  Int      @id @default(autoincrement())
  bvn                 String   @unique
  first_name          String
  last_name           String
  middle_name         String?
  gender              String
  date_of_birth       String
  phone_number1       String
  image               String
  email               String
  enrollment_bank     String
  enrollment_branch   String
  level_of_account    String
  lga_of_origin       String
  lga_of_residence    String
  marital_status      String
  name_on_card        String
  nationality         String
  nin                 String?  @unique
  phone_number2       String?
  registration_date   String
  residential_address String
  state_of_origin     String
  state_of_residence  String
  title               String
  watch_listed        String
  user                User     @relation(fields: [userId], references: [id])
  userId              String   @unique
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
}

model BankDetail {
  id             String  @id @default(uuid())
  bank_name      String
  bank_code      String
  account_number String
  account_name   String
  user           User    @relation(fields: [userId], references: [id])
  userId         String
  Loans          Loans[]
}

model CardDetail {
  id         String  @id @default(uuid())
  email      String
  card_no    String
  cart_token String
  card_name  String
  user       User    @relation(fields: [userId], references: [id])
  userId     String
  Loans      Loans[]
}

model EmergencyContact {
  id           String @id @unique @default(uuid())
  relationship String
  name         String
  phone_number String
  user         User   @relation(fields: [userId], references: [id])
  userId       String
}

model ColleagueContact {
  id           String @id @unique @default(uuid())
  name         String
  phone_number String
  user         User   @relation(fields: [userId], references: [id])
  userId       String
}

model EmploymentDetails {
  id                 String @id @unique @default(uuid())
  company_name       String
  company_address    String
  role               String
  salary_range       String
  employment_status  String
  date_of_employment String
  user               User   @relation(fields: [userId], references: [id])
  userId             String
}

model Loans {
  id                  String             @id @unique @default(uuid())
  amount              Float
  duration            Int
  loan_request_status LoanStatus
  amount_requested    Float
  amount_disbursed    Float?
  disbursementStatus  DisbursementStatus @default(NOTDISBURSED)
  amount_owed         Float?
  amount_paid         Float?
  loan_date           DateTime?
  loan_due_date       DateTime?
  paid_at             DateTime?
  paid                Boolean            @default(false)
  repayment_frequency String?
  status              LoanStatus
  purpose             String
  interest            Interest           @relation(fields: [interestId], references: [id])
  interestId          String
  overDueFee          Float
  overDueDays         Int
  overDueCategory     OverDueCategory?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  LoanRepayment       LoanRepayment[]
  UserProperties      UserProperties     @relation(fields: [userPropertiesId], references: [id])
  userPropertiesId    String
  Bank                BankDetail         @relation(fields: [bankId], references: [id])
  bankId              String
  Card                CardDetail         @relation(fields: [cardId], references: [id])
  cardId              String
}

model LoanRepayment {
  id         String            @id @unique @default(uuid())
  amount     Float
  loan       Loans             @relation(fields: [loanId], references: [id])
  loanId     String
  type       LoanRepaymentType
  handler_id String
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
}

model Interest {
  id             String   @id @unique @default(uuid())
  name           String
  vat            Float
  service_charge Float
  interest_rate  Float
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  Loans          Loans[]
}

model Disbursement {
  id               String         @id @unique @default(uuid())
  amount           Float
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  UserProperties   UserProperties @relation(fields: [userPropertiesId], references: [id])
  userPropertiesId String
}

model Messages {
  id              String         @id @unique @default(uuid())
  message         String
  created_at      DateTime       @default(now())
  updated_at      DateTime       @updatedAt
  ChatList        ChatList?      @relation(fields: [chatListId], references: [id])
  chatListId      String?
  ResolvedIssue   ResolvedIssue? @relation(fields: [resolvedIssueId], references: [id])
  resolvedIssueId String?
}

model ChatList {
  id               String         @id @unique @default(uuid())
  Messages         Messages[]
  Handler          Staff?         @relation(fields: [handlerId], references: [id])
  handlerId        String?
  resolved         Boolean        @default(false)
  online           Boolean        @default(true)
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  UserProperties   UserProperties @relation(fields: [userPropertiesId], references: [id])
  userPropertiesId String
}

model ResolvedIssue {
  id               String         @id @unique @default(uuid())
  Messages         Messages[]
  Handler          Staff?         @relation(fields: [handlerId], references: [id])
  handlerId        String?
  resolved         Boolean        @default(true)
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  UserProperties   UserProperties @relation(fields: [userPropertiesId], references: [id])
  userPropertiesId String
}
